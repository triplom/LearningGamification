module CourseService where

-- Import necessary modules
import DA.Time

-- Define type aliases for contract IDs
type CourseProposalId = ContractId CourseProposal
type CourseId = ContractId Course

-- Define a record type to represent information about a course
data CourseInfo = CourseInfo with
    courseId: Text         -- Id of the course
    title: Text            -- Title of the course
    details: Text          -- Details/description of the course
    soloCourse: Bool       -- Indicates if it's a solo course
    account : Int          -- Account information for the course
    courseType: Text       -- Type of the course
    status: Text           -- Status of the course
    startDate: Date        -- Start date of the course
    endDate: Date          -- End date of the course
        deriving (Show, Eq)

-- Define a typeclass for calculating duration
class Duration i o where
    getDuration : i -> o

-- Implement Duration for CourseInfo to Int
instance Duration CourseInfo Int where
    getDuration course =
        let
            startT: Time
            startT = time course.startDate 09 00 00

            endT: Time
            endT = time course.endDate 18 00 00

            diffInRelTime: RelTime
            diffInRelTime = subTime endT startT

            diffInDays: Int
            diffInDays = wholeDays diffInRelTime

            diffInWeekDays = diffInDays - (diffInDays / 7 * 2) + 1  -- Account for weekdays
        in 
            diffInWeekDays

-- Define a template for a course proposal
template CourseProposal
  with
    customer : Party            -- Customer proposing the course
    educhain : Party            -- Party representing the blockchain platform
    courseInfo: CourseInfo      -- Information about the course
    note: Text                  -- Additional notes/comments
  where
    signatory educhain, customer  -- Parties who can sign the contract

    -- Ensure that the end date is later than the start date
    ensure (courseInfo.startDate < courseInfo.endDate)

    -- Non-consuming choice to propose a course
    choice Propose: CourseProposalId 
        controller customer, educhain
        do
          return self

    -- Non-consuming choice for educhain to check customer accomplishments
    choice CustomerAccomplishments: [Text]
        with
            accomplishments: [(ContractId AccomplishmentCourse, AccomplishmentCourse)]
        controller educhain
        do
          if null accomplishments then return ["N/A"]
          else do
            -- Return a list of course titles and details from accomplishments
            return $ map (\acc -> acc._2.courseInfo.title <> " : " <> acc._2.courseInfo.details) accomplishments

    -- Choice for educhain to reject a course proposal
    choice Reject: ()
      with
          feedback: Text
      controller educhain
      do
         archive self

    -- Choice for customer to revise a course proposal
    choice Revise: CourseProposalId
      with
          newCourseInfo: CourseInfo
          comment: Text
      controller educhain
      do
          assertMsg ("Course info needs to be revised") (this.courseInfo /= newCourseInfo)
          create this with
            courseInfo = newCourseInfo
            note = comment

    -- Choice for customer to cancel the proposal
    choice Cancel: ()
      controller customer
      do
        archive self

    -- Choice for educhain to approve the course proposal and create a course contract
    choice Approve: CourseProposalId
      with
          newCourseInfo: CourseInfo
          comment: Text
      controller educhain
      do
          assertMsg ("Course Approved") (this.courseInfo /= newCourseInfo)
          create this with
            courseInfo = newCourseInfo
            note = comment

-- Define a template for a course
template Course
    with
        courseInfo: CourseInfo      -- Information about the course
        duration: Int               -- Duration of the course
        educhain: Party             -- Party representing the blockchain platform
        customer: Party
        evaluationDate: Date        -- Date of course evaluation
        educhainNote: Optional(Text)  -- Optional note from educhain
    where
        signatory educhain, customer  -- Parties who can sign the contract

        -- Ensure evaluationDate is after endDate
        ensure evaluationDate > courseInfo.endDate

        -- Choice for educhain to evaluate a course
        choice Evaluate: Either (ContractId Course) (ContractId AccomplishmentCourse)
            with
                todaysDate: Date           -- Current date
                feedback: Optional(Text)   -- Optional feedback
                readyToPublish: Bool       -- Indicates if course is ready to be published
                points: Int                -- Points associated with the course
            controller educhain
            do
                -- If readyToPublish, create an accomplishment contract; otherwise, update evaluation date and note
                if readyToPublish then do
                    newAcc <- create AccomplishmentCourse with
                        courseCid = self
                        courseInfo
                        educhain
                        customer
                        points
                    return (Right newAcc)
                else do
                    currCourse <- create this with 
                        evaluationDate = todaysDate
                        educhainNote = feedback
                    return (Left currCourse)

        -- Choice for educhain or course customer to cancel a course
        choice CancelCourse: ()
            controller educhain, customer
            do
                archive self

-- Define a template for an accomplishment
template AccomplishmentCourse
    with
        courseCid: ContractId Course    -- Course associated with the accomplishment
        courseInfo: CourseInfo      -- Information about the course
        educhain: Party                 -- Party representing the blockchain platform
        customer: Party                 -- Customer who completed the course
        points: Int                     -- Points associated with the accomplishment
    where
        signatory educhain
        observer customer

        -- Non-consuming choice for educhain to mark the course as accomplished
        choice Accomplished: ContractId AccomplishmentCourse
            with
                newCourseInfo: CourseInfo  -- Updated course info
                comment: Text              -- Comment about the accomplishment
                additionalPoints: Int      -- Additional points to be awarded
            controller educhain
            do
                -- Ensure the course information has changed
                assertMsg "Course Completed" (this.courseInfo /= newCourseInfo)
                -- Create the updated accomplishment contract
                create this with
                    courseCid = this.courseCid
                    courseInfo = newCourseInfo
                    points = this.points + additionalPoints
