-- PointsCommitment.daml

{-# LANGUAGE PartialTypeSignatures #-}


module PointsCommitment where
import PointsIssuance

--bcplatform can commit to lock. Once he commits, the original points is archived.
-- BEGIN_POINTS_COMMITMENT_TEMPLATE_DATATYPE
template PointsCommitment
  with
    bcplatform: Party
    employee: Party
    amount: Numeric 2
   where
    signatory employee
    observer bcplatform
-- END_POINTS_COMMITMENT_TEMPLATE_DATATYPE

-- BEGIN_POINTS_COMMITMENT_TEMPLATE_LOCK_POINTS
    nonconsuming choice LockPoints
      : ContractId LockedPoints
      with pointsCid: ContractId Points
           maturity: Time
           locker: Party
      controller bcplatform
      do
        inputPoints <- fetch pointsCid
        assert (inputPoints.bcplatform == bcplatform && inputPoints.employee == employee && inputPoints.amount == amount )
        --the original points firstly transferred to employee and then archived
        prop <- exercise pointsCid Transfer with newEmployee = employee
        do
          id <- exercise prop AcceptTransfer
          exercise id Archives
        --create a lockedPoints to represent the points in locked state
        create LockedPoints with
          points=inputPoints with bcplatform; employee; amount
          maturity; locker
-- END_POINTS_COMMITMENT_TEMPLATE_LOCK_POINTS
