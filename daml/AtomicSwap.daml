module AtomicSwap where

data SplitResult = SplitResult with
  splitAsset : ContractId Asset
  remainder : ContractId Asset
    deriving (Eq, Show)

-- Definição de diferentes tipos de ativos que podem ser trocados
data AssetType = GiftCard | Voucher deriving (Eq, Show)

template Asset
  with
    issuer: Party
    owner: Party
    points: Int
    reward: [AssetType]
    observers: [Party]
  where
    signatory issuer, owner
    observer observers
    ensure points > 0

    choice Asset_Transfer: ContractId AssetTransferProposal 
      with
        recipient: Party
      controller owner
      do
        create AssetTransferProposal with
          asset = this
          recipient

    choice Asset_Merge: ContractId Asset
      with
        otherAssetCid: ContractId Asset
      controller owner
      do
        otherAsset <- fetch otherAssetCid

        assertMsg "Merge failed: issuer does not match" (issuer == otherAsset.issuer)
        assertMsg "Merge failed: owner does not match" (owner == otherAsset.owner)

        archive otherAssetCid
        create this with
          points = points + otherAsset.points
          reward = reward ++ otherAsset.reward

    choice Asset_Split: SplitResult
      with
        splitPoints: Int
        splitReward: [AssetType]
      controller owner
      do
        splitAsset <- create this with
          points = splitPoints
          reward = splitReward
        remainder <- create this with
          points = points - splitPoints
          reward = filter (`notElem` splitReward) reward
        pure SplitResult with
          splitAsset
          remainder

    choice Asset_SetObservers: ContractId Asset
      with
        newObservers: [Party]
      controller owner
      do
        create this with
          observers = newObservers

template AssetTransferProposal
  with
    asset: Asset
    recipient: Party
  where
    signatory (signatory asset)
    observer recipient
    ensure asset.points > 0

    choice AssetTransferProposal_Accept: ContractId Asset
      controller recipient
      do
        create asset with
          owner = recipient

    choice AssetTransferProposal_Reject: ContractId Asset
      controller recipient
      do
        create asset

template SwapProposal
  with
    initiator: Party
    recipient: Party
    offerCid: ContractId Asset
    requestedAsset: Asset
  where
    signatory initiator
    observer recipient

    choice SwapProposal_Accept: ()
      with
        assetCid: ContractId Asset
      controller recipient
      do
        asset <- fetch assetCid
        assertMsg "Asset issuer does NOT match." (asset.issuer == requestedAsset.issuer) 
        assertMsg "Asset points does NOT match." (asset.points == requestedAsset.points)
        assertMsg "Asset owner does NOT match." (asset.owner == requestedAsset.owner)

        offerTransferProposal <- exercise offerCid Asset_Transfer with { recipient = recipient }
        requestedTransferProposal <- exercise assetCid Asset_Transfer with { recipient = initiator }
        exercise offerTransferProposal AssetTransferProposal_Accept
        exercise requestedTransferProposal AssetTransferProposal_Accept
        pure ()
