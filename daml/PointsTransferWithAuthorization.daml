
{-# LANGUAGE AllowAmbiguousTypes #-}
{-# LANGUAGE PartialTypeSignatures #-}

module PointsTransferWithAuthorization where

import Daml.Script
import Utility

-- Points contract
template Points
  with
    employee: Party
    employeeId: Int         -- Party representing the employee
    bcPlatform: Party     -- Party representing the blockchain platform
    amount: Numeric 2      -- Amount of points
    
  where
    signatory bcPlatform, employee

    ensure points.amount > 0.0

-- TransferRequest contract
template TransferRequest
  with
    points: Points          -- Points to be transferred
    employee: Party      -- Party representing the new employee
  where
    signatory points.employee
    signatory points.bcPlatform
    observer employee
    
     -- Choice to withdraw transfer
    choice WithdrawTransfer : ContractId Points
      controller points.employee
      do 
        let 
          newPoints = points.amount
          
          create this with
              points.amount = newPoints

    -- Choice to accept points transfer
    choice AcceptTransfer : ContractId Points
      controller points.employee
      do
        t <- fetch newPoints
        assert (points.bcPlatform == t.bcPlatform)  -- Check if bcplatform matches
        assert (employee == t.employee)          -- Check if newEmployee is authorized
        create Points with employee, bcPlatform = points.bcPlatform, amount = t.amount

-- AuthorizationPoints contract
template AuthorizationPoints
  with
    employee: Party         -- Party representing the employee
    bcPlatform: Party     -- Party representing the blockchain platform
  where
    signatory bcPlatform
    observer employee

    -- Choice to withdraw authorization
    choice WithdrawAuthorization
      : ()
      controller bcPlatform
      do return ()

-- RedeemPoints contract
template RedeemPoints
  with
    employee: Party         -- Party representing the employee
    bcPlatform: Party     -- Party representing the blockchain platform
    points.redeem: Numeric 2   -- Amount of points to redeem
  where
    signatory bcPlatform
    observer employee

-- Choice to redeem points
    choice Redeem: ContractId Points  -- Points to redeem from
      with
        points.redeem: ContractId Points
      controller employee
      do
        pointsContract <- fetch points.redeem
        assert (points.amount >= points.redeem)  -- Check if enough points available for redemption
        create pointsContract with amount = points.amount - points.redeem
