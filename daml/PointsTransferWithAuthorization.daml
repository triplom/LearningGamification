
{-# LANGUAGE AllowAmbiguousTypes #-}
{-# LANGUAGE PartialTypeSignatures #-}

module PointsTransferWithAuthorization where

import Daml.Script
import Utility

-- Points contract
template Points
  with
    employee: Party
    employeeId: Int         -- Party representing the employee
    bcPlatform: Party     -- Party representing the blockchain platform
    amount: Numeric 2      -- Amount of points
    
  where
    signatory bcPlatform, employee

    ensure amount > 0.0

    -- Choice to transfer points
    choice Transfer : ContractId TransferRequest
      with newEmployee: Party  -- Party representing the new employee
           amount: Points
      controller employee
      do create TransferRequest with points; amount; newEmployee

    -- Choice to check points balance
    choice CheckPointsBalance : ContractId Points
      controller employee
      do return this 

-- TransferRequest contract
template TransferRequest
  with
    points: Points          -- Points to be transferred
    newEmployee: Party      -- Party representing the new employee
  where
    signatory points.employee
    signatory points.bcPlatform
    observer newEmployee

    -- Choice to withdraw transfer
    choice WithdrawTransfer : ContractId Points
      controller points.employee
      do create points

    -- Choice to accept points transfer
    choice AcceptTransfer : ContractId Points
      with token: ContractId CheckPointsBalance
      controller newEmployee
      do
        t <- fetch token
        assert (points.bcPlatform == t.bcPlatform)  -- Check if bcplatform matches
        assert (newEmployee == t.employee)          -- Check if newEmployee is authorized
        create Points with employee = newEmployee, employeeId = points.employeeId, bcPlatform = points.bcPlatform, amount = t.amount

-- AuthorizationPoints contract
template AuthorizationPoints
  with
    employee: Party         -- Party representing the employee
    bcPlatform: Party     -- Party representing the blockchain platform
  where
    signatory bcPlatform
    observer employee

    -- Choice to withdraw authorization
    choice WithdrawAuthorization
      : ()
      controller bcPlatform
      do return ()

-- RedeemPoints contract
template RedeemPoints
  with
    employee: Party         -- Party representing the employee
    bcPlatform: Party     -- Party representing the blockchain platform
    pointsToRedeem: Numeric 2   -- Amount of points to redeem
  where
    signatory bcPlatform
    observer employee

-- Choice to redeem points
    choice Redeem: ContractId Points  -- Points to redeem from
      with
        pointsToRedeem: ContractId Points
      controller employee
      do
        pointsContract <- fetch pointsToRedeem
        assert (pointsContract.amount >= pointsToRedeem.amount)  -- Check if enough points available for redemption
        create pointsContract with amount = pointsContract.amount - pointsToRedeem.amount
