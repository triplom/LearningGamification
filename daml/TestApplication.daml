
module TestApplication where 

import Daml.Script
import Application 
import DA.Date (toDateUTC, date, Month(Jun), Month(May))
import DA.Time (time)
import DA.List (head)

-- 1. Tests Submit and Accept Application
testSubmitAndAcceptCustomerApplication: Script ()
testSubmitAndAcceptCustomerApplication = script do 
    natacha <- allocateParty "Natacha"
    educhain <- allocateParty "Educhain Incentives"
    
    setTime (time (date 2024 May 15) 10 30 0)
    now <- getTime 

    -- Natacha cria uma aplicação
    natachaCAppId <- submit natacha do         
        createCmd CustomerApplication with  
            customer = natacha 
            educhain = educhain 
            id = ""
            name = ""
            address = ""
            email = ""
            phone = Some ""
            timestamp = now 
            dob = toDateUTC now

    -- Natacha preenche os detalhes da aplicação e submete
    natachaCAppId <- submit natacha do 
        exerciseCmd natachaCAppId SubmitApplication 
            with
                appCustomer = natacha 
                appEduchain = educhain
                customerId = "123"
                customerName = "Natacha"
                customerAddress = "Rua do Blockchain 888"
                customerEmail = "natacha@educhain.io"
                customerPhone = "+351-999-123-1234"
                timestamp = now
                customerDob = date 2000 Jan 05    

    -- Educhain revisa a aplicação, criando uma conta para Natacha
    natachaCustomerApplication <- submit educhain do 
        exerciseCmd natachaCAppId ReviewApplication 

    -- Testando se a conta foi criada corretamente
    assertMsg "Natacha's account not created" (isSome natachaCustomerApplication)
    return ()



-- 2. Test Query Accounts
testQueryAccounts: Script ()
testQueryAccounts = script do 
    natacha <- allocateParty "Natacha"
    andre <- allocateParty "Andre"
    educhain <- allocateParty "Educhain Incentives"
    
    setTime (time (date 2024 May 15) 10 30 0)
    now <- getTime 

    -- Natacha cria uma aplicação
    natachaCAppId <- submit natacha do         
        createCmd CustomerApplication with  
            customer = natacha 
            educhain = educhain 
            id = ""
            name = ""
            address = ""
            email = ""
            phone = Some ""
            timestamp = now 
            dob = toDateUTC now

    -- Natacha preenche os detalhes da aplicação e submete
    natachaCAppId <- submit natacha do 
        exerciseCmd natachaCAppId SubmitApplication 
            with
                appCustomer = natacha 
                appEduchain = educhain
                customerId = "123"
                customerName = "Natacha"
                customerAddress = "Rua do Blockchain 888"
                customerEmail = "natacha@educhain.io"
                customerPhone = "+351-999-123-1234"
                timestamp = now
                customerDob = date 2000 Jan 05    

    -- Educhain revisa a aplicação, criando uma conta para Natacha
    natachaCustomerApplication <- submit educhain do 
        exerciseCmd natachaCAppId ReviewApplication 

    -- Andre cria uma aplicação
    andreCAppId <- submit andre do         
        createCmd CustomerApplication with  
            customer = andre 
            educhain = educhain 
            id = ""
            name = ""
            address = ""
            email = ""
            phone = Some ""
            timestamp = now 
            dob = toDateUTC now

    -- Andre preenche os detalhes da aplicação e submete
    andreCAppId <- submit andre do 
        exerciseCmd andreCAppId SubmitApplication 
            with
                appCustomer = andre 
                appEduchain = educhain
                customerId = "234"
                customerName = "Andre"
                customerAddress = "Rua Legder 456"
                customerEmail = "andre@educhain.io"
                customerPhone = "+351-999-555-5678"
                timestamp = now
                customerDob = date 2010 Jan 05    

    -- Verificando se as contas foram criadas corretamente
    customerApplications <- query @CustomerApplication educhain
    assertMsg "Natacha's account not created" (any (\(_, acc) -> acc.customer == natacha) customerApplications)
    assertMsg "Andre's account not created" (any (\(_, acc) -> acc.customer == andre) customerApplications)

    -- Removendo o valor do id fixo, obtendo-o a partir dos detalhes do contrato
    andreApplication <- query @CustomerApplication educhain
    let andreId = (head andreApplication)._2.id 

    -- Educhain revisa a aplicação do Andre, criando sua conta
    andreCustomerApplication <- submit educhain do 
        exerciseCmd andreCAppId ReviewApplication

    return ()


-- 3. Test Contract Modification's

testContractModification: Script () 
testContractModification = script do 
    natacha <- allocateParty "Natacha"
    andre <- allocateParty "Andre"
    educhain <- allocateParty "Educhain Incentives"
    
    setTime (time (date 2024 May 15) 10 30 0)
    now <- getTime 

    -- Natacha cria uma aplicação
    natachaCAppId <- submit natacha do         
        createCmd CustomerApplication with  
            customer = natacha 
            educhain = educhain 
            id = ""
            name = ""
            address = ""
            email = ""
            phone = Some ""
            timestamp = now 
            dob = toDateUTC now

    -- Natacha preenche os detalhes da aplicação e submete
    natachaCAppId <- submit natacha do 
        exerciseCmd natachaCAppId SubmitApplication 
            with
                appCustomer = natacha 
                appEduchain = educhain
                customerId = "123"
                customerName = "Natacha"
                customerAddress = "Rua da Blockchain 888"
                customerEmail = "natacha@educhain.io"
                customerPhone = "+351-999-123-1234"
                timeStamp = now
                customerDob = date 2000 Jan 05    


    -- Andre cria uma aplicação
    andreCAppId <- submit andre do         
        createCmd CustomerApplication with  
            customer = andre 
            educhain = educhain 
            id = ""
            name = ""
            address = ""
            email = ""
            phone = Some ""
            timestamp = now 
            dob = toDateUTC now

   -- Andre preenche os detalhes da aplicação e submete
    andreCAppId <- submit andre do 
        exerciseCmd andreCAppId SubmitApplication 
            with
                appCustomer = andre 
                appEduchain = educhain
                customerId = "234"
                customerName = "Andre"
                customerAddress = "Metaverse St"
                customerEmail = "andre@educhain.io"
                customerPhone = "+351-999-555-5678"
                timeStamp = now
                customerDob = date 2010 Jan 05    

    -- Obtendo o id de Natacha
    natachaApplication <- query @CustomerApplication natacha
    let natachaId = (head natachaApplication)._2.id 

    -- Educhain revisa a aplicação de Natacha, criando sua conta
    natachaCustomerApplication <- submit educhain do 
        exerciseCmd natachaCAppId ReviewApplication 

    -- Obtendo o id de Andre
    andreApplication <- query @CustomerApplication andre
    let andreId = (head andreApplication)._2.id 

    -- Educhain revisa a aplicação do Andre, criando sua conta 
    andreCustomerApplication <- submit educhain do 
        exerciseCmd andreCAppId ReviewApplication 

    -- Educhain modifica as contas de Natacha e Andre adicionando 100 pontos
    customerApplications <- query @CustomerApplication educhain
    submit educhain do 
        exerciseCmd (head customerApplications)._1 AddPoints 
            with newPoints = 100

    return()

