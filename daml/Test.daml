module Test where

import Application
import Account
import Utility
import CourseService

import Daml.Script

run : Script ()
run = script do
  -- Function to create an account
  createAccount : Script (ContractId Account)
  createAccount = do
    now <- getTime
    create Account with
      name = "Test Account"
      email = "test@example.com"
      phone = None
      address = "123 Test Street"
      timestamp = now
      status = Active
      points = 0

  -- Function to create a blank application
  createBlankApplication : Party -> Party -> Script (ContractId Application)
  createBlankApplication employee course = do
    now <- getTime
    create Application with
      employee
      course
      name = ""
      address = ""
      email = ""
      phone = None
      timestamp = now
      status = New
      score = None
      comment = None

  -- Function to test an application
  testApplication : ContractId Application -> Script ()
  testApplication appId = do
    submit $ SubmitApplicationAndSetStatus appId Submitted
    pure ()

  -- Function to add points to an account
  addPoints : ContractId Account -> Int -> Script ()
  addPoints accountId pointsToAdd = do
    submit $ AddPoints accountId pointsToAdd
    pure ()

  -- Function to add negative points to an account (for testing)
  addNegativePoints : ContractId Account -> Int -> Script ()
  addNegativePoints accountId negativePointsToAdd = do
    submit $ AddPoints accountId (-negativePointsToAdd)
    pure ()

  -- Function to complete a course
  completeCourse : ContractId Application -> ContractId Account -> Script ()
  completeCourse appId accountId = do
    submit $ CompleteCourse appId accountId

  -- Function to execute all tests
  testAll : Script ()
  testAll = do
    -- Create an account and an application
    accountId <- createAccount
    appId <- createBlankApplication "Employee" "Course"
    -- Test the application
    testApplication appId
    -- Add points to the account
    addPoints accountId 50
    -- Add negative points to the account (for testing)
    addNegativePoints accountId 50
    -- Create a new blank application
    appId' <- createBlankApplication "Andre" "Curso de Blockchain"
    -- Complete the course
    completeCourse appId' accountId
