module Application where


data Status = New | InProgress | Pending | Concluded
  deriving (Eq, Show)
 
template Application
  with
    employee, courseParty: Party
    name, address, email: Text
    phone: Optional Text
    timestamp: Time
    status: Status
    score: Optional Int
    comment: Optional Text
  where
    signatory employee
    observer courseParty
    choice SubmitApplicationAndSetStatus : ContractId Application
      with
        newStatus: Status
      controller employee
      do
        create this with status = newStatus
 
template Account
  with
    employee, course: Party
    points: Int
    newPoints: Int
    timestamp: Time
  where
    signatory course
    observer employee
 
    choice AddPoints : ContractId Account
      controller course
      do
        create this with points = points + newPoints
 
template CourseService
  with
    employee: Party
    course: Party
  where
    signatory course
    observer employee
 
    nonconsuming choice CreateBlankApplication : ContractId Application
      controller employee
      do
        now <- getTime
        create Application with
          employee
          courseParty = course
          name = ""
          address = ""
          email = ""
          phone = None
          timestamp = now
          status = New
          score = None
          comment = None
 
    choice CompleteCourse : ContractId Application
      with
        appId: ContractId Application
        account: ContractId Account
      controller course
        do
        -- Update the status of the course application to "Concluded"
        exercise appId SubmitApplicationAndSetStatus with newStatus = Concluded
 
        -- Exercise AddPoints choice on the fetched account contract
        exercise account AddPoints
 
        return appId