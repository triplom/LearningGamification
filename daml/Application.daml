-- Application.daml

module Application where

import Daml.Script
import DA.Date (toDateUTC, date, Month(Jan), Month(Mar))
import DA.Time (time)
import DA.Functor (void)

-- Define a custom data type to represent the status of an application
--data Status = New | InProgress | Pending | Completed | InvalidStatus | Submitted
 -- deriving (Show, Eq)

 
-- Define a template for an application form
template ApplicationForm
  with
     -- Define the parties involved in the contract
    bcplatform : Party  -- Party representing the blockchain platform
    employee : Party     -- Party representing the employee
    id: Int              -- Id of the application
    status : Text      -- Status of the application
    name : Text          -- Name of the applicant
    address : Text       -- Address of the applicant
    email : Text         -- Email of the applicant
    phone : Text        -- Phone number of the applicant
    timestamp : Time     -- Timestamp of the application
    amount : Numeric 2      -- Amount associated with the application
    comment : Text  -- Optional comment related to the application
    
  where
  -- Parties who can sign the contract
  signatory bcplatform, employee

  -- Ensure that the amount associated with the application is greater than 0.0
  ensure amount > 0.0

  -- Define a choice to submit the application
  choice ApplicationRequestSubmitted : ContractId ApplicationForm
    controller employee  -- Only the employee party can control this choice
    do
      -- Get the current time
      now <- getTime 
      -- Create a new application form contract with the submitted status
      create ApplicationForm 
        with 
        status = "Submitted"
        timestamp = now
        comment = "Application submitted"
        amount = 0.0
        name = "John Dois"
        address = "1234 Main St"
        email = "johndois@example.com"
        phone = "Nothing"
        id = 1
        bcplatform = bcplatform
        employee = employee

  choice ApplicationAccepted: ContractId ApplicationForm
    controller bcplatform
    do
    -- Get the current time
    now <- getTime
    -- Create a new application form contract with the accepted status
    create this with status = "Accepted"



-- Test to create an application form contract with status submitted
testCreateApp: Script ()
testCreateApp = script do
  -- Allocate the involved parties in the test
  bcplatform <- allocateParty "Blockchain Course"
  employee <- allocateParty "Employee"

  -- Get the current time
  now <- getTime

  -- Create an application form contract with invalid status
  employeeAppCid <- submit employee do
    createCmd ApplicationForm with
      bcplatform
      employee = employee
      name = ""
      address = ""
      email = ""
      phone = ""
      timestamp = now
      amount = 100.0
      id = 001
      status = "InvalidStatus"
      comment = ""
      
  
  -- Blockchain Platform accepts the application
  void $ submit bcplatform $ exerciseCmd employeeAppCid ApplicationAccepted


