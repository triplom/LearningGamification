module Application where

import DA.Time
import Daml.Script
import Utility (makePartiesFrom)

template Application
    with
        employee: Party
        courseParty: Party
        name: Text
        address: Text
        email: Text
        phone: Optional Text
        timestamp: Time
        status: Text
        score: Optional Int
        comment: Optional Text
    where
        signatory employee
        observer courseParty

        choice SubmitApplicationAndSetStatus: ContractId Application
            with
                newStatus: Text
            controller employee
            do
                create this with
                    status = newStatus
                    employee
                    courseParty
                    name
                    address
                    email
                    phone
                    timestamp
                    score
                    comment

template Account
    with
        employee: Party
        course: Party
        points: Int
        timestamp: Time
    where
        signatory employee, course
       

         
        choice AddPoints : ContractId Account
            with
                newPoints: Int
            controller course
            do
                create this with
                    points = points + newPoints

template CourseService
    with
        employee: Party
        course: Party
    where
        signatory course
        observer employee

        nonconsuming choice CreateBlankApplication: ContractId Application
            controller employee
            do
                now <- getTime
                create Application with
                    employee
                    courseParty = course
                    name = ""
                    address = ""
                    email = ""
                    phone = None
                    timestamp = now
                    status = "Pendente"
                    score = None
                    comment = None

        nonconsuming choice CompleteCourse: ContractId Application with appId: ContractId Application
            controller course
            do
                exercise appId SubmitApplicationAndSetStatus with newStatus = "Concluído"
                account <- fetch (employee, course)
                exercise account AddPoints 100
                pure appId

setup : Script ()
setup =
  script do
    [damlcoding, marcel] <- makePartiesFrom ["damlcoding", "Marcel"]
    time <- getTime
    csId <- submit damlcoding do
        create CourseService with
            employee = marcel
            course = damlcoding
    appId <- submit damlcoding do
        create Application with
            employee = marcel
            courseParty = damlcoding
            name = ""
            address = ""
            email = ""
            phone = None
            timestamp = time
            status = "New"
            score = None
            comment = None
    pure ()

test : Script ()
test =
  script do
    [damlcoding, marcel] <- makePartiesFrom ["damlcoding", "Marcel"]
    now <- getTime
    let completedHours = 50
    csId <- submit damlcoding do
        create CourseService with
            employee = marcel
            course = damlcoding
    appId <- submit damlcoding do
        create Application with
            employee = marcel
            courseParty = damlcoding
            name = ""
            address = ""
            email = ""
            phone = None
            timestamp = now
            status = "New"
            score = None
            comment = None
    submit damlcoding do
        exercise @CourseService csId (CompleteCourse appId)
    let expectedPoints = completedHours * 10
    account <- query @Account (damlcoding, appId)
    case account of
        None -> error "Não foi possível encontrar a conta associada à aplicação."
        Some acc -> assertMsg ("Pontos não foram adicionados corretamente à conta após completar o curso. Expected: " ++ show expectedPoints ++ ", Actual: " ++ show (getField @"points" acc)) (getField @"points" acc == expectedPoints)
