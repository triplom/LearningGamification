module Application where

import DA.Optional
import CourseService
import DA.Time
import Daml.Script
import DA.Date (Month(Jun), date)


-- Create customer application to enter in Educhain blockchain ledger
template CLPApplication 
    with 
        id: Text 
        customer: Party           -- Customer Party
        educhain: Party 
        name: Text
        address: Text
        email: Text
        phone: Optional Text
        timestamp: Time 
        dob: Date 
       
    where 
        signatory customer
        observer educhain 
         
        choice SubmitApplication: ContractId CLPApplication 
            with 
                appCustomer: Party 
                appEduchain: Party
                customerId: Text 
                customerName: Text
                customerAddress: Text
                customerEmail: Text
                customerPhone: Optional Text
                customerDob: Date 
            controller customer 
                do 
                    create CLPApplication  
                        with 
                            id = customerId
                            customer = appCustomer
                            educhain = appEduchain
                            name = customerName
                            address = customerAddress
                            email = customerEmail
                            phone = customerPhone
                            timestamp = timestamp
                            dob = customerDob
        
        choice ReviewApplication: Optional (ContractId CLPAccount)
            controller educhain 
                do 
                    account <- lookupByKey @CLPAccount (educhain, id)
                    now <- getTime
                    if (isSome account) then 
                        return None
                    else do
                        account <- create CLPAccount with                                
                                timestamp = now                                 
                                points = 0   
                                ..
                        return (Some account)

                        
        choice AcceptApplication: ContractId CLPAccount 
            with 
                points: Int
            controller educhain 
                do 
                    create CLPAccount 
                        with 
                            customer = customer
                            educhain = educhain
                            id = id
                            name = name
                            address = address
                            email = email
                            phone = phone
                            timestamp = timestamp
                            dob = dob
                            points = points

        choice RejectApplication: Text 
            controller educhain 
                do 
                    return ("Application rejected")

-- Customer account
template CLPAccount 
    with
        customer: Party 
        educhain: Party 

        id: Text 
        name: Text
        address: Text
        email: Text
        phone: Optional Text
        timestamp: Time 
        dob: Date 
        points: Int

    where 
        signatory customer, educhain 

        key (educhain, id): (Party, Text)
        maintainer key._1
    
        choice AddPoints : ContractId CLPAccount 
            with 
                newPoints: Int 
            controller educhain 
            do 
                create CLPAccount with 
                    points = points + newPoints
                    customer
                    educhain
                    id
                    name
                    address
                    email
                    phone
                    timestamp
                    dob
        
        choice AddCompletedPoints : Either (ContractId CLPAccount) Text
            with
                accomplishment: Bool
                courseInfo.customer: Text 
                courseInfo.id: Int
                points: Int
                newPoints: Int
                todaysDate: Date           -- Current date
                feedback: Optional(Text)   -- Optional feedback
            controller educhain 
            do 
            if accomplishment then do
                acc <- exerciseByKey @CLPAccount (educhain, id) AddCompletedPoints with newPoints
                return (Left acc)
              else do
                return (Right "Course incomplete, finalize the it to get your points")