module PointsIssuance where

import Daml.Script
import DA.Time

template PointsMaster
  with
    bcplatform: Party
  where
    signatory bcplatform

    nonconsuming choice Invite : ContractId PointsIssueProposal
      with employee: Party
      controller bcplatform
      do
        proposal <- create PointsIssueProposal with pointsAgreement = PointsIssueAgreement 
          with bcplatform; employee
        pure proposal

template PointsIssueProposal
  with
    pointsAgreement: PointsIssueAgreement
  where
    signatory pointsAgreement.bcplatform
    observer pointsAgreement.employee

    choice AcceptPointsProposal
      : ContractId PointsIssueAgreement
      controller pointsAgreement.employee
      do
        create pointsAgreement

template PointsIssueAgreement
  with
    bcplatform: Party
    employee: Party
  where
    signatory bcplatform, employee

    nonconsuming choice Issue : ContractId PointsIssued
      with amount: Numeric 2
      controller bcplatform
      do
        create PointsIssued 
          with bcplatform; employee; amount; delegates = []

template PointsIssued
  with
    employee: Party
    bcplatform: Party
    amount: Numeric 2 
    delegates : [Party]
  where
    signatory bcplatform, employee
    observer delegates

    choice Transfer : ContractId TransferProposal
      with newEmployee: Party
      controller employee
      do
        create TransferProposal 
          with points = this; newEmployee

    choice Lock : ContractId LockedPoints
      with maturity: Time; locker: Party
      controller employee
      do
        create LockedPoints 
          with points = this; maturity; locker

    choice Disclose : ContractId PointsIssued
      with p : Party
      controller employee
      do
        create this with delegates = p :: delegates

    choice Archives
      : ()
      controller bcplatform
      do
        assert (bcplatform == employee)

template LockedPoints
  with
    points: Numeric 2
    maturity: Time
    locker: Party
  where
    signatory bcplatform, employee
    observer locker

    choice Unlock
      : ContractId PointsIssued
      controller locker
      do
        create PointsIssued 
          with bcplatform; employee; amount = points; delegates = []

    choice Clawback
      : ContractId PointsIssued
      controller employee
      do
        assert (now >= maturity)
        create PointsIssued 
          with bcplatform; employee; amount = points; delegates = []

template TransferProposal
  with
    points: Numeric 2
    newEmployee: Party
  where
    signatory employee, bcplatform
    observer newEmployee

    choice WithdrawProposal
      : ContractId PointsIssued
      controller employee
      do
        create this 
          with bcplatform; employee; amount = points; delegates = []

    choice AcceptTransfer
      : ContractId PointsIssued
      controller newEmployee
      do
        create this
          with bcplatform; employee = newEmployee; amount = points; delegates = []

    choice RejectTransfer
      : ()
      controller newEmployee
      do
        pure ()
