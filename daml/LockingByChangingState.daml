-- LockingByChangingState.daml


{-# LANGUAGE PartialTypeSignatures #-}


module LockingByChangingState where

import Daml.Script

import Utility

-- BEGIN_LOCKABLE_POINTS_TEMPLATE
template LockablePoints
  with
    employee: Party
    bcplatform: Party
    amount: Decimal
    locker: Party
  where
    signatory bcplatform
    signatory employee
    observer locker

    ensure amount > 0.0

    --Transfer can happen only if it is not locked
    choice Transfer : ContractId TransferProposal
      with newEmployee: Party
      controller employee
      do
        assert (locker == employee)
        create TransferProposal
          with points=this; newEmployee

      --Lock can be done if employee decides to bring a locker on board
    choice Lock : ContractId LockablePoints
      with newLocker: Party
      controller employee
      do
        assert (newLocker /= employee)
        create this with locker = newLocker

    --Unlock only makes sense if the points is in locked state
    choice Unlock
      : ContractId LockablePoints
      controller locker
      do
        assert (locker /= employee)
        create this with locker = employee
-- END_LOCKABLE_POINTS_TEMPLATE


--TransferProposal
template TransferProposal
  with
    points: LockablePoints
    newEmployee: Party
  where
    signatory points.employee, points.bcplatform
    observer newEmployee

    choice WithdrawTransfer
      : ContractId LockablePoints
      controller points.employee
      do create points

    choice AcceptTransfer
      : ContractId LockablePoints
      controller newEmployee
      do create points with employee = newEmployee; locker = newEmployee

    choice RejectTransfer
      : ()
      controller newEmployee
      do return ()

template PointsProposal
  with
    employee: Party
    bcplatform: Party
    amount: Decimal
  where
    signatory bcplatform
    observer employee

    choice AcceptProposal
      : ContractId LockablePoints
      controller employee
      do create LockablePoints with bcplatform; employee; amount; locker=employee


locking : Script (ContractId LockablePoints)  -- test
locking =
  script do

    [bcplatform, employee, newEmployee, locker] <- makePartiesFrom ["Course", "Me", "You", "Custodian Course"]
    --when points is created, employee = locker. it is unlocked

    propId <- bcplatform `submit` do createCmd PointsProposal with employee; bcplatform; amount=100.0
    pointsCid <- employee `submit` do exerciseCmd propId AcceptProposal

    --employee can choose to lock it with his custodian bank
    lockedCid <- employee `submit` do exerciseCmd pointsCid Lock with newLocker=locker
    --since points is locked, employee cannot transfer
    employee `submitMustFail` do exerciseCmd lockedCid Transfer with newEmployee

    unlockedCid <- locker `submit` do exerciseCmd lockedCid Unlock

    propId <- employee `submit` do exerciseCmd unlockedCid Transfer with newEmployee
    newEmployee `submit` do exerciseCmd propId AcceptTransfer
